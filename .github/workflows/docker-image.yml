name: Build my Nagios image and push to my registry

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
jobs:
  build-n-push:
    permissions:
      id-token: write
      attestations: write
      actions: read
      contents: write
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3

    - name: Set the image version
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag macro.int.pgmac.net:5000/nagios:${{ inputs.tags || steps.vars.outputs.tag }}

    - name: Push to my internal registry
      run: docker push macro.int.pgmac.net:5000/nagios:${{ inputs.tags || steps.vars.outputs.tag }}

    - name: Run Syft SBoM scan
      uses: anchore/sbom-action@v0.17.8
      with:
        image: macro.int.pgmac.net:5000/nagios:${{ inputs.tags || steps.vars.outputs.tag }}
        format: cyclonedx-json
        output-file: syft-sbom.json
        artifact-name: syft-sbom.json

    - name: Upload SBoM to GitHub Artifact storage
      uses: actions/upload-artifact@v4
      with:
        name: syft-sbom.json
        path: 'syft-sbom.json'
        retention-days: 2
        overwrite: true

    - name: SHA256 hash the SBoM
      id: sha256
      run: echo "SHA256=$(sha256sum syft-sbom.json | cut -d ' ' -f1)" >> $GITHUB_ENV

    - name: Attest the SBoM
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: macro.int.pgmac.net:5000/Docker-Nagios/syft-sbom.json
        subject-digest: sha256:${{ env.SHA256 }}
        show-summary: true
        push-to-registry: true

    - name: Upload SBoM to Dependency Track
      uses: DependencyTrack/gh-upload-sbom@v3.1.0
      with:
        serverhostname: 'dtrack.int.pgmac.net'
        protocol: 'https'
        apikey: ${{ secrets.DT_APIKEY }}
        project: ${{ secrets.DT_PROJECT_UUID }}
        bomfilename: 'syft-sbom.json'
        autocreate: false

    - name: Exit code failure
      if: failure()
      run: |
        echo "colour=danger" >> $GITHUB_ENV
        echo "icon=ðŸ›‘" >> $GITHUB_ENV

    - name: Exit code cancelled
      if: cancelled()
      run: |
        echo "colour=warning" >> $GITHUB_ENV
        echo "icon=âš " >> $GITHUB_ENV

    - name: Exit code success
      if: success()
      run: |
        echo "colour=good" >> $GITHUB_ENV
        echo "icon=âœ…" >> $GITHUB_ENV

    - name: Send Slack message
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "channel": "builds",
            "attachments": [
              {
                "mrkdwn_in": ["text", "pretext"],
                "fallback": ${{ toJSON(join(github.event.commits.*.message, '<br>') || ':point_right: Manually triggered') }},
                "color": "${{ env.colour || 'grey' }}",
                "pretext": "${{ env.icon || '?' }} ${{ github.workflow }} (${{ github.ref_name }}) #${{ github.run_number }}",
                "author_name": "${{ github.triggering_actor || github.actor }}",
                "title": "${{ github.workflow }}",
                "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "text": ${{ toJSON(join(github.event.commits.*.message, '\n') || ':point_right: Manually triggered') }}
              },
              {
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "<${{ github.event.pull_request.html_url || github.event.head_commit.url || github.server_url }}|View commit>"
                    }
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
